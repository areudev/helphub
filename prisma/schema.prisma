// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
  requests    Request[]
  offers      Offer[]

  latitude  Float?
  longitude Float?
  vehicle   Vehicle?
  tasks     Task[]
}


model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, item, offer, request, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Item {
  id         String   @id @default(cuid())
  name       String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String
  details    Detail[]
  inventory  Inventory?
  requests   Request[]
  offers     Offer[]

  announcements AnnouncementItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Detail {
  id          String @id @default(cuid())
  detailName  String
  detailValue String
  item        Item   @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId      String
}

model Inventory {
  id       String @id @default(cuid())
  item     Item   @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId   String @unique
  quantity Int    @default(0)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id             String   @id @default(cuid())
  item           Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId         String
  quantity       Int
  numberOfPeople Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
  // status         String   // e.g., "pending", "approved", "received"
  notes          String?

  latitude       Float?
  longitude      Float?
  task           Task? 
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Offer {
  id             String       @id @default(cuid())
  item           Item         @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId         String
  quantity       Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
  // status         String       // e.g., "pending", "approved", "received"
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  announcementId String
  notes          String?      

  latitude       Float?
  longitude      Float?
  task           Task?

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Vehicle {
  id          String   @id @default(cuid())
  name        String
  capacity    Int
  currentLoad Int      @default(0)
  latitude    Float?
  longitude   Float?
  status      String   // e.g., "active", "maintenance", "inactive"
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique
}

model Task {
  id                     String   @id @default(cuid())
  status                 String   // e.g., "pending", "in_progress", "completed", "cancelled"
  description            String?
  priority               Int      @default(0)
  estimatedCompletionTime DateTime?
  rescuer                User     @relation(fields: [rescuerId], references: [id])
  rescuerId              String
  request                Request? @relation(fields: [requestId], references: [id])
  requestId              String?  @unique
  offer                  Offer?   @relation(fields: [offerId], references: [id])
  offerId                String?  @unique
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Base {
  id String @id @default(cuid())
  latitude Float
  longitude Float
}

model Category {
  id      String @id @default(cuid())
  name    String @unique
  items   Item[]
}

model Announcement {
  id        String      @id @default(cuid())
  content   String
  items     AnnouncementItem[]
  offers    Offer[]
  createdAt DateTime    @default(now())
}

model AnnouncementItem {
  id             String      @id @default(cuid())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  announcementId String  
  item           Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId         String
  quantity       Int
  count     Int @default(0)
  @@unique([announcementId, itemId])
}